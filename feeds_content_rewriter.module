<?php
/**
 * @file
 *
 * Implements hook functions for the feeds_content_rewriter module.
 */

// Load the content rewriting functions for the module.
module_load_include('inc', 'feeds_content_rewriter', 'feeds_content_rewriter_functions');

/**
 * Implements hook_node_insert().
 *
 * Inserts a database entry for the new feed if rewrite content was selected.
 *
 * @param $node
 *  The node that is being inserted.
 */
function feeds_content_rewriter_node_insert($node) {
    if($node->type == 'feed') {
        // Initial grab of the values submitted by the user on the form.
        $form_state_values = variable_get('feeds_content_rewriter_form_state_values', array());

        // Grab all the values into a single array feed_data and write it into the database.
        if(isset($form_state_values['rewrite_content']) && $form_state_values['rewrite_content'] == TRUE) {
            $feed_data = array(
                'nid' => $node->nid,
                'rewrite_content' => $form_state_values['rewrite_content'],
                'stopwords' => $form_state_values['stopwords'],
                'ignored_words' => $form_state_values['ignored_words'],
                'stopwords_only' => $form_state_values['stopwords_only'],
                'spintax_output' => $form_state_values['spintax_output'],
                'rewrite_after_spin' => $form_state_values['rewrite_after_spin']
            );
        }
        drupal_write_record('feeds_content_rewriter', $feed_data);

        // Memory cleaning after inserting data to database.
        variable_del('feeds_content_rewriter_form_state_values');
    }
}

/**
 * Implements hook_node_update().
 *
 * Updates the database entry for the current feed after a feed node is updated or creates a new entry if it does not
 * yet exist.
 *
 * @param $node
 *  The node that is being updated.
 */
function feeds_content_rewriter_node_update($node) {
    if($node -> type == 'feed') {
        $nid = $node -> nid;
        $form_state_values = variable_get('feeds_content_rewriter_form_state_values', array());

        // If node ID is valid and the form values are not empty, update the database to reflect new values or add entry
        // if necessary.
        if(isset($nid) && $nid != 0 && !empty($form_state_values)) {
            db_merge('feeds_content_rewriter')
                ->key(array('nid' => $nid))
                ->fields(array(
                'nid' => $nid,
                'rewrite_content' => $form_state_values['rewrite_content'],
                'stopwords' => $form_state_values['stopwords'],
                'ignored_words' => $form_state_values['ignored_words'],
                'stopwords_only' => $form_state_values['stopwords_only'],
                'spintax_output' => $form_state_values['spintax_output'],
                'rewrite_after_spin' => $form_state_values['rewrite_after_spin']
            ))
                ->execute();
        }
    }
}

/**
 * Implements hook_node_delete().
 *
 * Deletes the database entry for the feed that was just deleted.
 *
 * @param $node
 *  The node is being deleted.
 */
function feeds_content_rewriter_node_delete($node) {
    if($node -> type == 'feed') {
        $nid = $node -> nid;

        // Delete database entry after deleting a feed node.
        db_delete('feeds_content_rewriter')
            ->condition('nid', $nid)
            ->execute();
    }
}

/**
 * Implements hook_feeds_after_parse().
 *
 * Grabs data from the database for rewriting or if it doesn't exist, grab data from the form.
 *
 * @param $source
 *  FeedsSource object that describes the source that is being imported.
 * @param $result
 *  FeedsParserResult object that has been parsed from the source.
 */
function feeds_content_rewriter_feeds_after_parse($source, $result) {
    // Query the database to see if the current node already exists.
    $db_result = db_query("SELECT * FROM {feeds_content_rewriter} WHERE nid = :nid", array(':nid' => $source->feed_nid));
    foreach($db_result as $record) {
        if($record != NULL) {
            $form_state_values = array(
                'rewrite_content' => $record -> rewrite_content,
                'stopwords' => $record -> stopwords,
                'ignored_words' => $record -> ignored_words,
            );

            if(isset($record -> stopwords_only)) {
                $form_state_values['stopwords_only'] = $record -> stopwords_only;
            }
            if(isset($record -> spintax_output)) {
                $form_state_values['spintax_output'] = $record -> spintax_output;
            }
            if(isset($record -> rewrite_after_spin)) {
                $form_state_values['rewrite_after_spin'] = $record -> rewrite_after_spin;
            }
        }
        // If the database values do not exist, use $form_state_values to parse the content.
        else {
            $form_state_values = variable_get('feeds_content_rewriter_form_state_values', array());
        }
    }
    if(isset($form_state_values['rewrite_content']) && $form_state_values['rewrite_content'] == TRUE) {
        if(!empty($form_state_values['stopwords'])) {
            $stopwords = explode("\n", $form_state_values['stopwords']);
        }
        else {
            $stopwords = NULL;
        }

        if(!empty($form_state_values['ignored_words'])) {
            $ignored_words = explode("\n", $form_state_values['ignored_words']);
        }
        else {
            $ignored_words = NULL;
        }

        if($form_state_values['stopwords_only'] && !$form_state_values['spintax_output']) {
            foreach($result -> items as $key => $item) {
                $result -> items[$key]['description'] = mb_string_convert($item['description'], $stopwords, $ignored_words);
            }
        }
        else if($form_state_values['spintax_output']) {
            foreach($result -> items as $key => $item) {
                $spun_string = spin_string($item['description'], 1);

                if(is_array($spun_string)) {
                    $result -> items[$key]['description'] = implode("", $spun_string);
                }
            }

            if($form_state_values['rewrite_after_spin'] && !$form_state_values['stopwords_only']) {
                foreach($result -> items as $key => $item) {
                    $result -> items[$key]['description'] = mb_string_convert($item['description'], NULL, $ignored_words);
                }
            }
            else if($form_state_values['rewrite_after_spin'] && $form_state_values['stopwords_only']) {
                foreach($result -> items as $key => $item) {
                    $result -> items[$key]['description'] = mb_string_convert($item['description'], $stopwords, $ignored_words);
                }
            }
        }
        else if(!$form_state_values['stopwords_only'] && !$form_state_values['spintax_output']) {
            foreach($result -> items as $key => $item) {
                $result -> items[$key]['description'] = mb_string_convert($item['description'], NULL, $ignored_words);
            }
        }
    }
}

/**
 * Implements hook_form_alter().
 *
 * Creates a form based on values of the entry for the current node in the database or sets it to the default values
 * if a record doesn't exist in he database.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function feeds_content_rewriter_form_alter(&$form, &$form_state, $form_id) {
    if($form_id == 'feed_node_form') {
        // Default values for the form.
        if (!$stopwords = file_get_contents('stopwords.txt', TRUE))
	    $stopwords = '';
        $ignored_words = '';
        $rewrite_content = FALSE;
        $stopwords_only = FALSE;
        $spintax_output = FALSE;
        $rewrite_after_spin = FALSE;
        $db_result = array(NULL);

        // Get the current node ID and the values set for the content rewriter form.
        if (arg(0) == 'node' && is_numeric(arg(1))) $nid = arg(1);

        if (isset($nid) && $nid != 0) {
            $db_result = db_query("SELECT * FROM {feeds_content_rewriter} WHERE nid = :nid", array(':nid' => $nid));
        }

        foreach($db_result as $record) {
            if($record != NULL) {
                if(isset($record -> rewrite_content)) {
                    $rewrite_content = $record -> rewrite_content;
                }
                if(isset($record -> stopwords)) {
                    $stopwords = $record -> stopwords;
                }
                if(isset($record -> ignored_words)) {
                    $ignored_words = $record -> ignored_words;
                }
                if(isset($record -> stopwords_only)) {
                    $stopwords_only = $record -> stopwords_only;
                }
                if(isset($record -> spintax_output)) {
                    $spintax_output = $record -> spintax_output;
                }
                if(isset($record -> rewrite_after_spin)) {
                    $rewrite_after_spin = $record -> rewrite_after_spin;
                }
            }
            else {
                if(!$stopwords = file_get_contents('stopwords.txt', TRUE))
		    $stopwords = '';
                $ignored_words = '';
                $rewrite_content = FALSE;
                $stopwords_only = FALSE;
                $spintax_output = FALSE;
                $rewrite_after_spin = FALSE;
            }
        }



        $form['content_rewriter'] = array (
            '#type' => 'fieldset',
            '#title' => 'Content Rewriter',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#weight' => -10,
            '#group' => 'additional_settings'
        );

        $form['content_rewriter']['rewrite_content'] = array (
            '#type' => 'checkbox',
            '#title' => 'Rewrite Content',
            '#default_value' => $rewrite_content
        );

        $form['content_rewriter']['stopwords'] = array (
            '#type' => 'textarea',
            '#title' => 'Stopwords',
            '#description' => 'Enter words that you would like rewritten.',
            '#resizeable' => TRUE,
            '#default_value' => $stopwords
        );

        $form['content_rewriter']['ignored_words'] = array (
            '#type' => 'textarea',
            '#title' => 'Ignored Words',
            '#description' => 'Enter words that you would not want rewritten.',
            '#resizeable' => TRUE,
            '#default_value' => $ignored_words
        );

        $form['content_rewriter']['stopwords_only'] = array (
            '#type' => 'checkbox',
            '#title' => 'Stopwords Only',
            '#default_value' => $stopwords_only
        );

        $form['content_rewriter']['spintax_output'] = array (
            '#type' => 'checkbox',
            '#title' => 'Spintax Output',
            '#default_value' => $spintax_output
        );

        $form['content_rewriter']['rewrite_after_spin'] = array (
            '#type' => 'checkbox',
            '#title' => 'Rewrite After Spinning',
            '#default_value' => $rewrite_after_spin
        );

        $form['#validate'][] = 'feeds_content_rewriter_form_validate';
        $form['#submit'][] = 'feeds_content_rewriter_form_submit';
    }
}

/**
 * Implements hook_feeds_after_import().
 *
 * Removes the unnecessary form state values variable after all the data is used.
 *
 * @param $source
 *  FeedsSource object that describes the source that is being imported.
 */
function feeds_content_rewriter_feeds_after_import($source) {
    variable_del('feeds_content_rewriter_form_state_values');
}

/**
 * Validation callback function for content rewriter form submission.
 *
 * Checks to see if information was entered correctly before parsing any data.
 *
 * @param $form
 * @param $form_state
 */
function feeds_content_rewriter_form_validate($form, &$form_state) {
    $form_state_values = $form_state['values'];
    if($form_state_values['rewrite_content'] == TRUE) {
        if($form_state_values['stopwords_only'] && $form_state_values['spintax_output'] && !$form_state_values['rewrite_after_spin']) {
            form_set_error('rewrite_after_spin', 'Please check the rewrite after spin checkbox if you want to rewrite on stopwords.');
        }

        if(!$form_state_values['spintax_output'] && $form_state_values['rewrite_after_spin']) {
           form_set_error('rewrite_after_spin', 'Please check the spintax output checkbox if you want to rewrite after spinning content.');
        }

        if($form_state_values['stopwords_only'] && empty($form_state_values['stopwords'])) {
            form_set_error('stopwords', 'Stopwords checked, but no stopwords exist.');
        }
    }
}

/**
 * Submission callback for the content rewriter form.
 *
 * Saves a variable containing all the user submitted data for use in other hooks and callbacks.
 *
 * @param $form
 * @param $form_state
 */
function feeds_content_rewriter_form_submit($form, &$form_state) {
    // Save all the form submission data for use in other functions.
    variable_set('feeds_content_rewriter_form_state_values', $form_state['values']);
}
